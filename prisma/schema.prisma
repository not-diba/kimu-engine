generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id           String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String?     @db.VarChar(255)
  duration     Int
  instructions String      @db.Text
  createdBy    String?     @db.VarChar(255)
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  updatedAt    DateTime    @default(now()) @db.Timestamp(6)
  Favourite    Favourite[]
}

enum PaymentStatus {
  Complete
  Pending
  Failed
  Error
}

model Payment {
  id        String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  amount    Float
  method    String        @db.VarChar(255)
  status    PaymentStatus
  createdAt DateTime      @default(now()) @db.Timestamp(6)
  updatedAt DateTime      @default(now()) @db.Timestamp(6)
  Order     Order?
}

enum AuthProvider {
  Google
  Apple
  TikTok
  Meta
}

model User {
  id           String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String       @db.VarChar(255)
  email        String?      @db.VarChar(255)
  phoneNumber  String       @db.VarChar(255)
  profileImage String
  authProvider AuthProvider
  providerId   String       @db.VarChar(255)
  createdAt    DateTime     @default(now()) @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @db.Timestamp(6)
  Addresses    Address[]
  Orders       Order[]
  Favourites   Favourite[]
}

model Ingredient {
  id           String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String @db.VarChar(255)
  type         String @db.VarChar(255)
  defaultUnit  String @db.VarChar(255)
  basePrice    Float
  baseQuantity Float
}

enum BuildingType {
  Apartment
  House
  Office
  Hotel
  Other
}

model Address {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  city           String       @db.VarChar(255)
  buildingType   BuildingType
  buildingName   String?      @db.VarChar(255)
  unitNumber     String?      @db.VarChar(255)
  additionalInfo String?      @db.Text
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  orders         Order[]
}

enum DeliveryStatus {
  OrderPlaced
  InTransit
  Delivered
  Cancelled
  Failed
}

model Order {
  id             String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  deliveryStatus DeliveryStatus
  createdAt      DateTime       @default(now()) @db.Timestamp(6)

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String  @unique @db.Uuid

  address   Address? @relation(fields: [addressId], references: [id])
  addressId String?  @db.Uuid
}

model Favourite {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.Uuid

  Recipe   Recipe? @relation(fields: [recipeId], references: [id])
  recipeId String? @db.Uuid
}

model Category {
  id   String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String @db.VarChar(255)
}
