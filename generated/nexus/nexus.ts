/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  RecipeCategoryInput: { // input type
    categoryIds: string[]; // [String!]!
    recipeIds: string[]; // [String!]!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Category: { // root type
    id: string; // String!
    name: string; // String!
  }
  Mutation: {};
  Query: {};
  Recipe: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy?: string | null; // String
    duration: number; // Int!
    id: string; // String!
    instructions: string; // String!
    name?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Category: { // field return type
    id: string; // String!
    name: string; // String!
  }
  Mutation: { // field return type
    addRecipeToCategory: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
    createCategory: NexusGenRootTypes['Category'] | null; // Category
    createRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    deleteRecipe: string | null; // String
    updateRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
  }
  Query: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    getRecipesInACategory: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
    recipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    recipes: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
  }
  Recipe: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: string | null; // String
    duration: number; // Int!
    id: string; // String!
    instructions: string; // String!
    name: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Category: { // field return type name
    id: 'String'
    name: 'String'
  }
  Mutation: { // field return type name
    addRecipeToCategory: 'Recipe'
    createCategory: 'Category'
    createRecipe: 'Recipe'
    deleteRecipe: 'String'
    updateRecipe: 'Recipe'
  }
  Query: { // field return type name
    categories: 'Category'
    getRecipesInACategory: 'Recipe'
    recipe: 'Recipe'
    recipes: 'Recipe'
  }
  Recipe: { // field return type name
    categories: 'Category'
    createdAt: 'DateTime'
    createdBy: 'String'
    duration: 'Int'
    id: 'String'
    instructions: 'String'
    name: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addRecipeToCategory: { // args
      input: NexusGenInputs['RecipeCategoryInput']; // RecipeCategoryInput!
    }
    createCategory: { // args
      name: string; // String!
    }
    createRecipe: { // args
      createdBy?: string | null; // String
      duration: number; // Int!
      instructions: string; // String!
      name: string; // String!
    }
    deleteRecipe: { // args
      recipeId: string; // String!
    }
    updateRecipe: { // args
      createdBy?: string | null; // String
      duration?: number | null; // Int
      instructions?: string | null; // String
      name?: string | null; // String
      recipeId: string; // String!
    }
  }
  Query: {
    getRecipesInACategory: { // args
      categoryId: string; // String!
    }
    recipe: { // args
      recipeId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}