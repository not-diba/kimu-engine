/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddressInput: { // input type
    additionalInfo?: string | null; // String
    buildingName: string; // String!
    buildingType: NexusGenEnums['BuildingType']; // BuildingType!
    city: string; // String!
    country: string; // String!
    unitNumber?: string | null; // String
  }
  AddressUpdateInput: { // input type
    additionalInfo?: string | null; // String
    buildingName?: string | null; // String
    buildingType?: NexusGenEnums['BuildingType'] | null; // BuildingType
    city?: string | null; // String
    country?: string | null; // String
    unitNumber?: string | null; // String
  }
  PaymentInput: { // input type
    amount: string; // String!
    method: NexusGenEnums['PaymentMethod']; // PaymentMethod!
  }
  RecipeCategoryInput: { // input type
    categoryIds: string[]; // [String!]!
    recipeIds: string[]; // [String!]!
  }
  RecipeIngredientInput: { // input type
    basePrice: number; // Float!
    baseQuantity: number; // Float!
    defaultUnit: NexusGenEnums['DefaultUnit']; // DefaultUnit!
    name: string; // String!
    quantity: number; // Float!
    type: NexusGenEnums['IngredientType']; // IngredientType!
    unit: NexusGenEnums['Unit']; // Unit!
  }
}

export interface NexusGenEnums {
  AuthProvider: "Apple" | "Google" | "Meta" | "TikTok"
  BuildingType: "Apartment" | "Hotel" | "House" | "Office" | "Other"
  DefaultUnit: "can" | "clove" | "g" | "ml" | "pack" | "piece" | "pinch" | "slice"
  IngredientType: "Carbohydrates" | "Dairy" | "Grain" | "Liquid" | "Meat" | "Other" | "Spice" | "Vegetable"
  PaymentMethod: "Card" | "Mobile"
  PaymentStatus: "Complete" | "Error" | "Failed" | "Pending"
  Unit: "can" | "clove" | "cup" | "g" | "kg" | "l" | "ml" | "pack" | "piece" | "pinch" | "slice" | "tbsp" | "tsp"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Address: { // root type
    additionalInfo?: string | null; // String
    buildingName: string; // String!
    buildingType: NexusGenEnums['BuildingType']; // BuildingType!
    city: string; // String!
    country: string; // String!
    unitNumber?: string | null; // String
  }
  AuthResponse: { // root type
    accessToken?: string | null; // String
    message: string; // String!
    userId?: string | null; // String
  }
  Category: { // root type
    id: string; // String!
    name: string; // String!
  }
  Ingredient: { // root type
    basePrice: number; // Float!
    baseQuantity: number; // Float!
    defaultUnit: NexusGenEnums['DefaultUnit']; // DefaultUnit!
    name: string; // String!
    type: NexusGenEnums['IngredientType']; // IngredientType!
  }
  Mutation: {};
  Payment: { // root type
    amount: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    method: NexusGenEnums['PaymentMethod']; // PaymentMethod!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Recipe: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy?: string | null; // String
    duration: number; // Int!
    id: string; // String!
    instructions: string; // String!
    name?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  RecipeIngredient: { // root type
    ingredient: NexusGenRootTypes['Ingredient']; // Ingredient!
    price: number; // Float!
    quantity: number; // Float!
    unit: NexusGenEnums['Unit']; // Unit!
  }
  User: { // root type
    authProvider: NexusGenEnums['AuthProvider']; // AuthProvider!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    idToken: string; // String!
    name?: string | null; // String
    phoneNumber?: string | null; // String
    profileImage?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Address: { // field return type
    additionalInfo: string | null; // String
    buildingName: string; // String!
    buildingType: NexusGenEnums['BuildingType']; // BuildingType!
    city: string; // String!
    country: string; // String!
    unitNumber: string | null; // String
  }
  AuthResponse: { // field return type
    accessToken: string | null; // String
    message: string; // String!
    userId: string | null; // String
  }
  Category: { // field return type
    id: string; // String!
    name: string; // String!
  }
  Ingredient: { // field return type
    basePrice: number; // Float!
    baseQuantity: number; // Float!
    defaultUnit: NexusGenEnums['DefaultUnit']; // DefaultUnit!
    name: string; // String!
    type: NexusGenEnums['IngredientType']; // IngredientType!
  }
  Mutation: { // field return type
    addRecipeToCategory: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
    authenticateUser: NexusGenRootTypes['AuthResponse'] | null; // AuthResponse
    createCategory: NexusGenRootTypes['Category'] | null; // Category
    createRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteRecipe: string | null; // String
    deleteUser: string | null; // String
    updateRecipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    updateUser: NexusGenRootTypes['User'] | null; // User
    verifyUser: string | null; // String
  }
  Payment: { // field return type
    amount: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    method: NexusGenEnums['PaymentMethod']; // PaymentMethod!
    status: NexusGenEnums['PaymentStatus']; // PaymentStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    getRecipesInACategory: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
    recipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    recipes: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
  }
  Recipe: { // field return type
    categories: Array<NexusGenRootTypes['Category'] | null> | null; // [Category]
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    createdBy: string | null; // String
    duration: number; // Int!
    id: string; // String!
    ingredients: Array<NexusGenRootTypes['RecipeIngredient'] | null> | null; // [RecipeIngredient]
    instructions: string; // String!
    name: string | null; // String
    totalPrice: number; // Float!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  RecipeIngredient: { // field return type
    ingredient: NexusGenRootTypes['Ingredient']; // Ingredient!
    price: number; // Float!
    quantity: number; // Float!
    unit: NexusGenEnums['Unit']; // Unit!
  }
  User: { // field return type
    addresses: Array<NexusGenRootTypes['Address'] | null> | null; // [Address]
    authProvider: NexusGenEnums['AuthProvider']; // AuthProvider!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    idToken: string; // String!
    name: string | null; // String
    phoneNumber: string | null; // String
    profileImage: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    additionalInfo: 'String'
    buildingName: 'String'
    buildingType: 'BuildingType'
    city: 'String'
    country: 'String'
    unitNumber: 'String'
  }
  AuthResponse: { // field return type name
    accessToken: 'String'
    message: 'String'
    userId: 'String'
  }
  Category: { // field return type name
    id: 'String'
    name: 'String'
  }
  Ingredient: { // field return type name
    basePrice: 'Float'
    baseQuantity: 'Float'
    defaultUnit: 'DefaultUnit'
    name: 'String'
    type: 'IngredientType'
  }
  Mutation: { // field return type name
    addRecipeToCategory: 'Recipe'
    authenticateUser: 'AuthResponse'
    createCategory: 'Category'
    createRecipe: 'Recipe'
    createUser: 'User'
    deleteRecipe: 'String'
    deleteUser: 'String'
    updateRecipe: 'Recipe'
    updateUser: 'User'
    verifyUser: 'String'
  }
  Payment: { // field return type name
    amount: 'String'
    createdAt: 'DateTime'
    method: 'PaymentMethod'
    status: 'PaymentStatus'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    categories: 'Category'
    getRecipesInACategory: 'Recipe'
    recipe: 'Recipe'
    recipes: 'Recipe'
  }
  Recipe: { // field return type name
    categories: 'Category'
    createdAt: 'DateTime'
    createdBy: 'String'
    duration: 'Int'
    id: 'String'
    ingredients: 'RecipeIngredient'
    instructions: 'String'
    name: 'String'
    totalPrice: 'Float'
    updatedAt: 'DateTime'
  }
  RecipeIngredient: { // field return type name
    ingredient: 'Ingredient'
    price: 'Float'
    quantity: 'Float'
    unit: 'Unit'
  }
  User: { // field return type name
    addresses: 'Address'
    authProvider: 'AuthProvider'
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    idToken: 'String'
    name: 'String'
    phoneNumber: 'String'
    profileImage: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addRecipeToCategory: { // args
      input: NexusGenInputs['RecipeCategoryInput']; // RecipeCategoryInput!
    }
    authenticateUser: { // args
      idToken: string; // String!
    }
    createCategory: { // args
      name: string; // String!
    }
    createRecipe: { // args
      categories?: string[] | null; // [String!]
      createdBy?: string | null; // String
      duration: number; // Int!
      ingredients?: NexusGenInputs['RecipeIngredientInput'][] | null; // [RecipeIngredientInput!]
      instructions: string; // String!
      name: string; // String!
    }
    createUser: { // args
      address?: NexusGenInputs['AddressInput'] | null; // AddressInput
      authProvider: NexusGenEnums['AuthProvider']; // AuthProvider!
      email: string; // String!
      idToken: string; // String!
      name?: string | null; // String
      phoneNumber?: string | null; // String
      profileImage?: string | null; // String
    }
    deleteRecipe: { // args
      recipeId: string; // String!
    }
    deleteUser: { // args
      userId: string; // String!
    }
    updateRecipe: { // args
      createdBy?: string | null; // String
      duration?: number | null; // Int
      ingredients?: NexusGenInputs['RecipeIngredientInput'][] | null; // [RecipeIngredientInput!]
      instructions?: string | null; // String
      name?: string | null; // String
      recipeId: string; // String!
    }
    updateUser: { // args
      address?: NexusGenInputs['AddressUpdateInput'] | null; // AddressUpdateInput
      name?: string | null; // String
      phoneNumber?: string | null; // String
      userId: string; // String!
    }
    verifyUser: { // args
      phoneNumber: string; // String!
      userId: string; // String!
    }
  }
  Query: {
    getRecipesInACategory: { // args
      categoryId: string; // String!
    }
    recipe: { // args
      recipeId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}