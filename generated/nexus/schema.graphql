### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  additionalInfo: String
  buildingName: String!
  buildingType: BuildingType!
  city: String!
  country: String!
  unitNumber: String
}

input AddressInput {
  additionalInfo: String
  buildingName: String!
  buildingType: BuildingType!
  city: String!
  country: String!
  unitNumber: String
}

input AddressUpdateInput {
  additionalInfo: String
  buildingName: String
  buildingType: BuildingType
  city: String
  country: String
  unitNumber: String
}

enum AuthProvider {
  Apple
  Google
  Meta
  TikTok
}

type AuthResponse {
  accessToken: String
  message: String!
  userId: String
}

enum BuildingType {
  Apartment
  Hotel
  House
  Office
  Other
}

type Category {
  id: String!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DefaultUnit {
  can
  clove
  g
  ml
  pack
  piece
  pinch
  slice
}

type Ingredient {
  basePrice: Float!
  baseQuantity: Float!
  defaultUnit: DefaultUnit!
  name: String!
  type: IngredientType!
}

enum IngredientType {
  Carbohydrates
  Dairy
  Grain
  Liquid
  Meat
  Other
  Spice
  Vegetable
}

type Mutation {
  addRecipeToCategory(input: RecipeCategoryInput!): [Recipe]
  authenticateUser(idToken: String!): AuthResponse
  createCategory(name: String!): Category
  createRecipe(categories: [String!], createdBy: String, duration: Int!, ingredients: [RecipeIngredientInput!], instructions: String!, name: String!): Recipe
  createUser(address: AddressInput, authProvider: AuthProvider!, email: String!, idToken: String!, name: String, phoneNumber: String, profileImage: String): User
  deleteRecipe(recipeId: String!): String
  deleteUser(userId: String!): String
  updateRecipe(createdBy: String, duration: Int, ingredients: [RecipeIngredientInput!], instructions: String, name: String, recipeId: String!): Recipe
  updateUser(address: AddressUpdateInput, name: String, phoneNumber: String, userId: String!): User
  verifyUser(phoneNumber: String!, userId: String!): String
}

type Payment {
  amount: String!
  createdAt: DateTime!
  method: PaymentMethod!
  status: PaymentStatus!
  updatedAt: DateTime!
}

input PaymentInput {
  amount: String!
  method: PaymentMethod!
}

enum PaymentMethod {
  Card
  Mobile
}

enum PaymentStatus {
  Complete
  Error
  Failed
  Pending
}

type Query {
  categories: [Category]
  getRecipesInACategory(categoryId: String!): [Recipe]
  recipe(recipeId: String!): Recipe
  recipes: [Recipe]
}

type Recipe {
  categories: [Category]
  createdAt: DateTime!
  createdBy: String
  duration: Int!
  id: String!
  ingredients: [RecipeIngredient]
  instructions: String!
  name: String
  totalPrice: Float!
  updatedAt: DateTime!
}

input RecipeCategoryInput {
  categoryIds: [String!]!
  recipeIds: [String!]!
}

type RecipeIngredient {
  ingredient: Ingredient!
  price: Float!
  quantity: Float!
  unit: Unit!
}

input RecipeIngredientInput {
  basePrice: Float!
  baseQuantity: Float!
  defaultUnit: DefaultUnit!
  name: String!
  quantity: Float!
  type: IngredientType!
  unit: Unit!
}

enum Unit {
  can
  clove
  cup
  g
  kg
  l
  ml
  pack
  piece
  pinch
  slice
  tbsp
  tsp
}

type User {
  addresses: [Address]
  authProvider: AuthProvider!
  createdAt: DateTime!
  email: String!
  id: String!
  idToken: String!
  name: String
  phoneNumber: String
  profileImage: String
  updatedAt: DateTime!
}